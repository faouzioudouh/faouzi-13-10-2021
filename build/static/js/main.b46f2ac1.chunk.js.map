{"version":3,"sources":["utils/orderbook.ts","hooks/use-orderbook.ts","workers/feed-worker.ts","utils/number.ts","components/graph-line/index.tsx","components/table/index.tsx","components/button/index.tsx","components/orderbook/index.tsx","modules/config.ts","modules/device.ts","hooks/use-element-client-rect.ts","hooks/use-tab-visibility.ts","hooks/use-window-width.ts","hooks/use-realtime-feed.ts","reportWebVitals.ts","index.tsx"],"names":["calculateTotal","levels","reduce","accumulator","currentLevelPrice","currentLevelSize","total","acc","sortOrderbookLevels","order","sort","aPrice","bPrice","useOrderbook","rawOrderbook","maxLength","useState","orderbook","spread","totalSize","orderbookData","setOrderbookData","useEffect","bids","asks","getTotalSize","askLevels","bidLevels","calculateOrderbookLevelsTotals","limit","trimmedBids","slice","trimmedAsks","trimOrderbook","sortOrderbook","sortedOrderbook","highestBid","lowestAsk","highestBidPrice","calculateSpread","numberFormat","Intl","NumberFormat","priceNumberFormat","minimumFractionDigits","maximumFractionDigits","formatNumber","input","format","GraphLine","width","theme","className","x","y","height","fill","fill-opacity","Table","forwardRef","ref","levelsWithTotals","hideHeader","map","price","size","Button","children","rest","realtimeFeedSource","value","config","process","trim","Error","getConfig","UPDATES_INTERVAL_MS","navigator","hardwareConcurrency","Orderbook","tableRef","useRef","elementRef","animationFrameId","bottom","left","right","top","elementHeight","setElementHeight","updateClientRect","useCallback","current","getBoundingClientRect","element","elementResizeObserver","ResizeObserver","window","requestAnimationFrame","observe","unobserve","cancelAnimationFrame","useElementClientRect","tabVisible","document","visibilityState","setVisibility","updateVisibility","addEventListener","removeEventListener","useTabVisibility","isMobile","windowWith","setWindowWith","updateWindowWith","innerWidth","useWindowWidth","updateInterval","ready","setIsReady","setRawOrderbook","workerRef","currentProductsIdsRef","lastProductsIdsRef","Worker","workerPath","onmessage","event","data","type","message","postMessage","subscribeToFeed","productsIds","unsubscribe","currentProductsIds","lastProductsIds","useRealtimeFeed","orderbookToDisplay","useMemo","reverse","toggleFeed","includes","length","join","onClick","disabled","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b46f2ac1.chunk.js","sourcesContent":["import { Orderbook, OrderbookMessage, LevelWithTotal, Level } from '../types/orderbook';\n\nexport const calculateTotal = (levels: Level[]): LevelWithTotal[] =>\n  levels.reduce<LevelWithTotal[]>((accumulator, [currentLevelPrice, currentLevelSize]) => {\n    const total = accumulator.reduce((acc, [_, currentSize]) => acc + currentSize, currentLevelSize);\n\n    return [...accumulator, [currentLevelPrice, currentLevelSize, total]];\n  }, []);\n\n/**\n * To avoid re-sorting the orderbook, make sure you only pass the\n * sorted orderbook to this function.\n */\nexport const calculateOrderbookLevelsTotals = (orderbook: OrderbookMessage): Orderbook => {\n  const askLevels = calculateTotal(orderbook.asks);\n  const bidLevels = calculateTotal(orderbook.bids);\n\n  return {\n    ...orderbook,\n    asks: askLevels,\n    bids: bidLevels,\n  };\n};\n\nexport const updateOrRemoveOrderbookLevels = (levels: Level[], patch: Level[]): Level[] =>\n  levels.reduce((acc, incoming) => {\n    const [incomingPrice, incomingSize] = incoming;\n\n    const matched = acc.find(([price]) => price === incomingPrice);\n\n    // if price level size is Zero remove from it orderbook\n    if (matched && incomingSize === 0) {\n      return acc.filter((item) => item !== matched);\n    }\n\n    // if price level greater than zero remove update the price level size\n    if (matched && incomingSize > 0) {\n      return acc.map((item) => (item === matched ? incoming : item));\n    }\n\n    // if incoming level price is not part of orderbook, add it.\n    if (!matched && incomingSize > 0) {\n      return [...acc, incoming];\n    }\n\n    return acc;\n  }, patch);\n\nexport const sortOrderbookLevels = (levels: Level[], order: 'asc' | 'desc'): Level[] =>\n  levels.sort(([aPrice], [bPrice]) => (order === 'desc' ? bPrice - aPrice : aPrice - bPrice));\n\nexport const sortOrderbook = (orderbook: OrderbookMessage): OrderbookMessage => {\n  return {\n    ...orderbook,\n    // lowest ask prices first\n    asks: sortOrderbookLevels(orderbook.asks, 'asc'),\n    // highest bid prices first\n    bids: sortOrderbookLevels(orderbook.bids, 'desc'),\n  };\n};\n\n/**\n * To avoid re-sorting the orderbook, make sure you only pass the\n * sorted orderbook to this function.\n */\nexport const calculateSpread = (sortedOrderbook: Orderbook): number => {\n  const [highestBid] = sortedOrderbook.bids;\n  const [lowestAsk] = sortedOrderbook.asks;\n\n  if (lowestAsk && highestBid) {\n    const [highestBidPrice] = highestBid;\n    const [lowestAskBidPrice] = lowestAsk;\n\n    return lowestAskBidPrice - highestBidPrice;\n  }\n\n  return 0;\n};\n\nexport const trimOrderbook = (orderbook: OrderbookMessage, limit: number): OrderbookMessage => {\n  const trimmedBids = orderbook.bids.slice(0, limit);\n  const trimmedAsks = orderbook.asks.slice(0, limit);\n\n  return { ...orderbook, asks: trimmedAsks, bids: trimmedBids };\n};\n\nexport const getTotalSize = (orderbook: OrderbookMessage): number => {\n  const totalSizeBids = orderbook.bids.reduce((acc, [_, size]) => acc + size, 0);\n  const totalSizeAsks = orderbook.asks.reduce((acc, [_, size]) => acc + size, 0);\n\n  return totalSizeBids + totalSizeAsks;\n};\n","import { useEffect, useState } from 'react';\n\nimport type { Orderbook, OrderbookMessage } from '../types/orderbook';\nimport {\n  calculateOrderbookLevelsTotals,\n  calculateSpread,\n  getTotalSize,\n  sortOrderbook,\n  trimOrderbook,\n} from '../utils/orderbook';\n\nexport const useOrderbook = (rawOrderbook: OrderbookMessage | null, maxLength: number) => {\n  const [orderbookData, setOrderbookData] = useState<{\n    orderbook: Orderbook | null;\n    spread: number | null;\n    totalSize: number;\n  }>({\n    orderbook: null,\n    spread: null,\n    totalSize: 0,\n  });\n\n  useEffect(() => {\n    if (rawOrderbook) {\n      const totalSize = getTotalSize(rawOrderbook);\n      const sortedOrderbook = sortOrderbook(rawOrderbook);\n      const trimmedOrderbook = trimOrderbook(sortedOrderbook, maxLength);\n      const orderbook = calculateOrderbookLevelsTotals(trimmedOrderbook);\n      const spread = calculateSpread(orderbook);\n\n      setOrderbookData({ orderbook, spread, totalSize });\n    }\n  }, [rawOrderbook, maxLength]);\n\n  return orderbookData;\n};\n","export default __webpack_public_path__ + \"feed-worker.js\";","const numberFormat = new Intl.NumberFormat('en-GB');\n\nconst priceNumberFormat = new Intl.NumberFormat('en-GB', {\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2,\n});\n\nexport const formatNumber = (input: number): string => numberFormat.format(input);\n\nexport const formatPrice = (input: number): string => priceNumberFormat.format(input);\n","import type { VFC } from 'react';\n\nimport './graph-line.css';\n\ninterface Props {\n  width: number;\n  theme: 'green' | 'red';\n}\n\nexport const GraphLine: VFC<Props> = ({ width, theme }) => {\n  return (\n    <svg className=\"graph-line\">\n      <rect x=\"0\" y=\"0\" width={`${width}%`} height=\"100%\" fill={theme} fill-opacity=\"0.2\"></rect>\n    </svg>\n  );\n};\n","import { forwardRef } from 'react';\nimport type { ReactElement } from 'react';\n\nimport type { LevelWithTotal } from '../../types/orderbook';\nimport { formatNumber, formatPrice } from '../../utils/number';\nimport { GraphLine } from '../../components/graph-line';\nimport './table.css';\n\ninterface Props {\n  levelsWithTotals: LevelWithTotal[];\n  theme: 'red' | 'green';\n  hideHeader?: boolean;\n  totalSize: number;\n}\n\n// Adding this multiplies so the graph lines are more visible\n// Tick size is not described in the spec, so it was not implemented.\nconst MULTIPLIER = 100;\n\nexport const Table = forwardRef<HTMLTableSectionElement, Props>(\n  ({ levelsWithTotals, theme, hideHeader, totalSize }, ref): ReactElement => {\n    return (\n      <div className={`table-container ${theme}`} ref={ref}>\n        <table className=\"table\">\n          {!hideHeader ? (\n            <thead className=\"table-head\">\n              <tr>\n                <th>PRICE</th>\n                <th>SIZE</th>\n                <th>TOTAL</th>\n              </tr>\n            </thead>\n          ) : null}\n          <tbody>\n            {levelsWithTotals.map(([price, size, total]) => (\n              <tr key={price} className=\"graph-line-container\">\n                <td className=\"apply-them-color\">\n                  <GraphLine width={((total * 100) / totalSize) * MULTIPLIER} theme={theme} />\n                  {formatPrice(price)}\n                </td>\n                <td>{formatNumber(size)}</td>\n                <td>{formatNumber(total)}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    );\n  }\n);\n","import type { ButtonHTMLAttributes, DetailedHTMLProps, FC } from 'react';\n\nimport './button.css';\n\ninterface Props extends DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement> {}\n\nexport const Button: FC<Props> = ({ children, ...rest }) => {\n  return (\n    <button className=\"button\" {...rest}>\n      {children}\n    </button>\n  );\n};\n","import { useCallback, useEffect, useMemo, useRef } from 'react';\n\nimport { useOrderbook } from '../../hooks/use-orderbook';\nimport { useRealtimeFeed } from '../../hooks/use-realtime-feed';\nimport { formatNumber } from '../../utils/number';\nimport { useElementClientRect } from '../../hooks/use-element-client-rect';\nimport { useTabVisibility } from '../../hooks/use-tab-visibility';\nimport { useWindowWidth } from '../../hooks/use-window-width';\nimport { getConfig } from '../../modules/config';\nimport { getUpdatesIntervalInMsBasedOnDevicePerformance } from '../../modules/device';\nimport type { Orderbook as OrderbookType } from '../../types/orderbook';\nimport { Table } from '../table';\nimport { Button } from '../button';\nimport { Inactivity } from '../Inactivity';\n\nimport './orderbook.css';\n\nconst { realtimeFeedSource } = getConfig();\nconst UPDATES_INTERVAL_MS = getUpdatesIntervalInMsBasedOnDevicePerformance();\n\n// Used to calculate the available space in the screen\n// to know how many rows we can render.\nconst TABLE_ROW_HEIGHT_PX = 34;\n\nexport const Orderbook = () => {\n  const tableRef = useRef<HTMLTableSectionElement | null>(null);\n  const { height } = useElementClientRect(tableRef);\n  const { tabVisible } = useTabVisibility();\n  const { isMobile } = useWindowWidth();\n\n  const { rawOrderbook, subscribeToFeed, unsubscribe, ready, currentProductsIds, lastProductsIds } = useRealtimeFeed(\n    realtimeFeedSource,\n    UPDATES_INTERVAL_MS\n  );\n\n  const rowsCount = height / TABLE_ROW_HEIGHT_PX - 1;\n  const { spread, orderbook, totalSize } = useOrderbook(rawOrderbook, rowsCount);\n\n  const orderbookToDisplay: OrderbookType | null = useMemo(() => {\n    if (isMobile && orderbook) {\n      return { ...orderbook, asks: [...orderbook.asks].reverse() };\n    }\n\n    return orderbook;\n  }, [isMobile, orderbook]);\n\n  const toggleFeed = useCallback(() => {\n    if (!currentProductsIds.includes('PI_XBTUSD')) {\n      subscribeToFeed(['PI_XBTUSD']);\n    } else {\n      subscribeToFeed(['PI_ETHUSD']);\n    }\n  }, [subscribeToFeed, currentProductsIds]);\n\n  const reconnect = useCallback(() => {\n    subscribeToFeed(lastProductsIds);\n  }, [subscribeToFeed, lastProductsIds]);\n\n  useEffect(() => {\n    if (currentProductsIds.length === 0) {\n      subscribeToFeed(['PI_XBTUSD']);\n    }\n  }, [subscribeToFeed]);\n\n  useEffect(() => {\n    if (!tabVisible) {\n      unsubscribe();\n    }\n  }, [unsubscribe, tabVisible]);\n\n  return (\n    <div className=\"orderbook\">\n      <h1 className=\"title\">Order book ({currentProductsIds?.join(', ')})</h1>\n      <p className=\"spread\">Spread: {spread !== null ? formatNumber(spread) : null}</p>\n      <Table\n        ref={tableRef}\n        levelsWithTotals={orderbookToDisplay?.bids ?? []}\n        totalSize={totalSize}\n        hideHeader={isMobile}\n        theme=\"green\"\n      />\n      <Table levelsWithTotals={orderbookToDisplay?.asks ?? []} totalSize={totalSize} theme=\"red\" />\n      <footer className=\"footer\">\n        <Button onClick={toggleFeed} disabled={!ready}>\n          Toggle Feed\n        </Button>\n      </footer>\n\n      {/* {currentProductsIds.length === 0 ? <Inactivity onReconnect={reconnect} /> : null} */}\n    </div>\n  );\n};\n","const asString = (value: string | undefined): string => (typeof value !== 'undefined' ? `${value}`.trim() : '');\n\nexport const getConfig = () => {\n  const config = {\n    realtimeFeedSource: asString(process.env.REACT_APP_REALTIME_FEED_SOURCE_URL),\n  };\n\n  if (!config.realtimeFeedSource) {\n    throw new Error('Not all envs are set. check your .env file');\n  }\n\n  return config;\n};\n","const POWERFUL_CPU_CONCURRENCY = 32;\n\nexport const getDevicePerformanceRank = () => {\n  return POWERFUL_CPU_CONCURRENCY / navigator.hardwareConcurrency;\n};\n\nexport const getUpdatesIntervalInMsBasedOnDevicePerformance = (): number => {\n  const performanceRank = getDevicePerformanceRank();\n\n  return performanceRank * 500;\n};\n","import type { RefObject } from 'react';\nimport { useRef, useState, useEffect, useCallback } from 'react';\n\nexport type ElementClientRect = Omit<DOMRectReadOnly, 'toJSON'>;\n\nexport const useElementClientRect = (elementRef: RefObject<HTMLElement>): ElementClientRect => {\n  const animationFrameId = useRef<number>(0);\n  const [elementHeight, setElementHeight] = useState<ElementClientRect>({\n    bottom: 0,\n    height: 0,\n    left: 0,\n    right: 0,\n    top: 0,\n    width: 0,\n    x: 0,\n    y: 0,\n  });\n\n  const updateClientRect = useCallback(() => {\n    if (!elementRef.current) {\n      return;\n    }\n\n    const { width, top, right, height, bottom, left, x, y } = elementRef.current.getBoundingClientRect();\n\n    setElementHeight({\n      bottom,\n      height,\n      left,\n      right,\n      top,\n      width,\n      x,\n      y,\n    });\n  }, [elementRef]);\n\n  useEffect(() => {\n    const element = elementRef.current;\n\n    if (!element) return;\n\n    const elementResizeObserver = new ResizeObserver(() => {\n      animationFrameId.current = window.requestAnimationFrame(updateClientRect);\n    });\n\n    elementResizeObserver.observe(element);\n\n    return () => {\n      if (element !== null) {\n        elementResizeObserver.unobserve(element);\n        window.cancelAnimationFrame(animationFrameId.current);\n      }\n    };\n  }, [elementRef, updateClientRect]);\n\n  return elementHeight;\n};\n","import { useState, useEffect, useCallback } from 'react';\n\nexport const useTabVisibility = (): { tabVisible: boolean } => {\n  const [tabVisible, setVisibility] = useState(document.visibilityState === 'visible');\n\n  const updateVisibility = useCallback(() => {\n    setVisibility(document.visibilityState === 'visible');\n  }, []);\n\n  useEffect(() => {\n    document.addEventListener('visibilitychange', updateVisibility);\n\n    return () => document.removeEventListener('visibilitychange', updateVisibility);\n  }, [updateVisibility]);\n\n  return { tabVisible };\n};\n","import { useCallback, useEffect, useState } from 'react';\n\nconst MOBILE_MAX_WITH_PX = 768;\n\nexport const useWindowWidth = () => {\n  const [windowWith, setWindowWith] = useState<number>(0);\n\n  const updateWindowWith = useCallback(() => {\n    setWindowWith(window.innerWidth);\n  }, []);\n\n  useEffect(() => {\n    updateWindowWith();\n    window.addEventListener('resize', updateWindowWith);\n\n    return () => window.removeEventListener('resize', updateWindowWith);\n  }, [updateWindowWith]);\n\n  return { windowWith, isMobile: windowWith <= MOBILE_MAX_WITH_PX };\n};\n","import { useCallback, useEffect, useRef, useState } from 'react';\n\nimport type { OrderbookMessage, ProductsIds } from '../types/orderbook';\nimport { InitMessageBody, SendMessageBody, SubscribeMessageBody, UnsubscribeMessageBody } from '../types/worker';\n/* eslint-disable-next-line import/no-webpack-loader-syntax */\nimport workerPath from 'file-loader?name=[name].js!../workers/feed-worker';\n\nexport const useRealtimeFeed = (realtimeFeedSource: string, updateInterval: number) => {\n  const [ready, setIsReady] = useState(false);\n  const [rawOrderbook, setRawOrderbook] = useState<OrderbookMessage | null>(null);\n  const workerRef = useRef<Worker | null>(null);\n  const currentProductsIdsRef = useRef<ProductsIds[]>([]);\n  const lastProductsIdsRef = useRef<ProductsIds[]>([]);\n\n  useEffect(() => {\n    workerRef.current = new Worker(workerPath);\n\n    workerRef.current.onmessage = (event: MessageEvent<SendMessageBody>) => {\n      if (event.data.type === 'ORDERBOOK_UPDATE') {\n        setRawOrderbook(event.data.data);\n      }\n\n      if (event.data.type === 'READY') {\n        setIsReady(event.data.data);\n      }\n    };\n\n    const message: InitMessageBody = {\n      type: 'INIT',\n      data: {\n        realtimeFeedSource,\n        updateInterval,\n      },\n    };\n\n    workerRef.current.postMessage(message);\n  }, [realtimeFeedSource, updateInterval]);\n\n  const subscribeToFeed = useCallback((productsIds: ProductsIds[]) => {\n    if (productsIds === currentProductsIdsRef.current) {\n      return;\n    }\n\n    currentProductsIdsRef.current = productsIds;\n    lastProductsIdsRef.current = productsIds;\n\n    const message: SubscribeMessageBody = {\n      type: 'SUBSCRIBE',\n      data: {\n        productsIds,\n      },\n    };\n\n    workerRef.current?.postMessage(message);\n  }, []);\n\n  const unsubscribe = useCallback(() => {\n    currentProductsIdsRef.current = [];\n\n    const message: UnsubscribeMessageBody = {\n      type: 'UNSUBSCRIBE',\n    };\n\n    workerRef.current?.postMessage(message);\n  }, []);\n\n  return {\n    subscribeToFeed,\n    unsubscribe,\n    ready,\n    rawOrderbook,\n    currentProductsIds: currentProductsIdsRef.current,\n    lastProductsIds: lastProductsIdsRef.current,\n  };\n};\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Orderbook } from './components/orderbook';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Orderbook />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}